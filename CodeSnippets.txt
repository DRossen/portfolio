 
 // TO BE PLACED IN HEADER SECTION //
 
 <script>
    // Define your code snippets in variables
    const gridCode = `
Workmap* workmap = heatmapManager->GetWorkmap(posToDefend, gridRadius);
workmap->Add(AI::Team::Player, AI::HeatType::Location, -1.0);
workmap->ExcludeUserInfluence(user, AI::HeatType::Location);
workmap->Add(AI::Team::Enemy, AI::HeatType::Location, 2.0);
workmap->GetPositionByHighestValue(*position);
    `;

    const interestTemplate = `
void InfluenceManager::InitTemplate(const int aSize, FalloffFunction aFallofCurve, InterestTemplate& aTemplate)
{
	int dimension = (aSize * 2);
	dimension = dimension % 2 != 0 ? dimension : dimension + 1;
	aTemplate.dimensions = dimension;
	aTemplate.values.resize(dimension * dimension);
	aTemplate.centerCell = { dimension / 2, dimension / 2 };
	int index = 0;
	for (int row = 0; row < dimension; row++)
	{
		for (int col = 0; col < dimension; col++)
		{
			int coordDistance = (Vector2i(col, row) - aTemplate.centerCell).LengthSqr();
			float distance = sqrt(static_cast<float>(coordDistance)) * myCellSize;
			float interest = aFallofCurve(distance, static_cast<float>(aSize));
			aTemplate.values[index] = interest;
			index++;
		}
	}
}
    `;

    const workmap = `
Workmap* workmap = influenceManager->GetWorkmap(scanCenterPosition, scanRadius);
workmap->Add(Team::Player, InfluenceType::Proximity, -1.0);
workmap->ExcludeUserInfluence(user, InfluenceType::Proximity);
workmap->Add(Team::Enemy, InfluenceType::Proximity, 2.0);

Vector3f result;
if (workmap->GetPositionByHighestValue(result)) {
highestThreatPosition = result;
}
    `;
    const floodfill = `
void InfluenceMap::FloodFillInfluence(const Vector2i& aOriginCoord, const InfluenceData& aInfluenceData, float aAmount)
{
	InterestTemplate& interestTemplate = myManager->GetImprintTemplate(aInfluenceData);
	FalloffFunction curveFunc = GetFalloffFunction(aInfluenceData.type);
	int radius = interestTemplate.dimensions / 2;
	int maxIterations = radius + 1;
	std::set<int> visited;
	std::queue<std::tuple<Vector2i, Vector2i, int>> bfsQueue;
	Vector2i boundsMin = { std::max(myBoundsMin.x, aOriginCoord.x - radius), std::max(myBoundsMin.y, aOriginCoord.y - radius) };
	Vector2i boundsMax = { std::min(myBoundsMax.x, aOriginCoord.x + radius), std::min(myBoundsMax.y, aOriginCoord.y + radius) };
	bfsQueue.push({ aOriginCoord, interestTemplate.centerCell, 1 });
	int worldStartIndex = aOriginCoord.y * myGridSize.x + aOriginCoord.x;
	int localStartIndex = interestTemplate.centerCell.y * interestTemplate.dimensions + interestTemplate.centerCell.x;
	if (worldStartIndex >= 0 && worldStartIndex < myValues.size())
	{
		myValues[worldStartIndex] += interestTemplate.values[localStartIndex] * aAmount;
		visited.insert(worldStartIndex);
	}
	float bfsFallof = 1.0f;
	int distance = 1;
	int iteration = 1;
	while (!bfsQueue.empty())
	{
		Vector2i nextLocalCoord, nextTemplateCoord;
		Vector2i localCoord, templateCoord;
		std::tie(localCoord, templateCoord, distance) = bfsQueue.front();
		bfsQueue.pop();
		bfsFallof = curveFunc(static_cast<float>(distance), static_cast<float>(maxIterations));
		for (const auto& direction : directions)
		{
			nextLocalCoord = localCoord + direction;
			nextTemplateCoord = templateCoord + direction;
			if (nextLocalCoord.x < boundsMin.x || nextLocalCoord.x > boundsMax.x ||
				nextLocalCoord.y < boundsMin.y || nextLocalCoord.y > boundsMax.y) {
				continue;
			}
			int heatmapIndex = nextLocalCoord.y * myGridSize.x + nextLocalCoord.x;
			int templateIndex = nextTemplateCoord.y * interestTemplate.dimensions + nextTemplateCoord.x;
			if (!myValidCells->at(heatmapIndex)) continue;
			if (visited.find(heatmapIndex) == visited.end())
			{
				myValues[heatmapIndex] += (interestTemplate.values[templateIndex] * bfsFallof) * aAmount;
				bfsQueue.push({ nextLocalCoord, nextTemplateCoord, distance + 1 });
				visited.insert(heatmapIndex);
			}
		}
	}
}
    `;

    // Function to inject code into the page and apply syntax highlighting
    function injectCode(code, elementId) {
      const element = document.getElementById(elementId);
      element.innerHTML = code;  // Inject as HTML (not plain text)
      // Re-apply syntax highlighting after the content is injected
      hljs.highlightElement(element); // highlight the specific element
    }

    // Is being called when the page loads.
    // Which injects the code snippets into placed where we added them (by id, "grid-code" for example )
    window.onload = function() {
      injectCode(gridCode, "grid-code");
      injectCode(interestTemplate, "interest-template");
      injectCode(workmap, "work-map");
      injectCode(floodfill, "flood-fill");
    };
  </script>